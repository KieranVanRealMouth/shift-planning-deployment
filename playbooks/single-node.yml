---
# Single-node deployment playbook using role-based architecture
# This is the new role-based version of single-node.yml

- name: Deploy Shift Planning Services on Single Node (Role-Based)
  hosts: all
  become: false

  tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          Deploying Shift Planning application using role-based architecture
          Environment: {{ deployment_environment }}
          Base path: {{ app_base_path }}

- name: Setup Infrastructure
  hosts: all
  become: false
  roles:
    - role: podman_network
      tags: ["infrastructure", "network"]

    - role: database
      tags: ["infrastructure", "database"]

- name: Deploy Application Services
  hosts: all
  become: false
  tasks:
    - name: Deploy each application service
      include_role:
        name: app_service
      vars:
        service_config: "{{ item }}"
      loop: "{{ app_services }}"
      loop_control:
        loop_var: item
        label: "{{ item.name }}"
      tags: ["services", "deploy"]

- name: Display Deployment Summary
  hosts: all
  become: false
  tasks:
    - name: Show deployment status
      ansible.builtin.debug:
        msg: |
          ================================================
          Shift Planning services deployed successfully!
          ================================================

          Services:
          - Database: {{ database_host_external }}:{{ database_port }} (with persistent storage)
          - Gateway Service (EXPOSED): http://{{ external_hostname }}{% if app_services[0].port != 80 and app_services[0].port != 443 %}:{{ app_services[0].port }}{% endif %}

          - Auth Service (INTERNAL): {{ app_services[1].container_name }}:{{ app_services[1].internal_port }}
          - Scheduling Service (INTERNAL): {{ app_services[2].container_name }}:{{ app_services[2].internal_port }}

          Security:
          ✓ Only Gateway service is exposed to the host
          ✓ Auth and Scheduling services are internal to Podman network
          ✓ Database is exposed only for migrations (localhost:{{ database_port }})

          Database data is persisted in Podman volume: shift-planning-db-data
          You can access the application at: http://{{ external_hostname }}{% if app_services[0].port != 80 and app_services[0].port != 443 %}:{{ app_services[0].port }}{% endif %}


          Useful commands:
          - View containers: podman ps
          - View logs: podman logs <container_name>
          - Restart service: podman restart <container_name>
          - Access internal service logs: podman logs {{ app_services[1].container_name }}
          - Check network: podman network inspect shift-planning-network
