---
# Main deployment playbook for Shift Planning application
# Uses role-based architecture with loops for scalable service deployment

- name: Shift Planning Application Deployment
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display deployment start message
      debug:
        msg: |
          Starting Shift Planning application deployment...
          Target environment: {{ deployment_environment }}
          Deployment type: Single-node with role-based architecture

          Note: This playbook deploys the current code in the repositories.
          To update repositories first, run: ansible-playbook playbooks/manage-repositories.yml

- name: Validate Repositories
  hosts: all
  become: yes
  roles:
    - role: repository_validation
      tags: ["validation", "infrastructure", "services"]

- name: Deploy Infrastructure Components
  hosts: all
  become: yes
  roles:
    - role: podman_network
      tags: ["infrastructure", "network"]

    - role: database
      tags: ["infrastructure", "database"]

- name: Deploy Application Services
  hosts: all
  become: yes
  tasks:
    - name: Deploy each application service using generic role
      include_role:
        name: app_service
      vars:
        service_config: "{{ item }}"
      loop: "{{ app_services }}"
      loop_control:
        loop_var: item
        label: "{{ item.name }}"
      tags: ["services", "deploy"]

- name: Post-deployment tasks
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display deployment completion message
      debug:
        msg: |
          ================================================
          Shift Planning deployment completed successfully!
          ================================================

          Environment: {{ deployment_environment }}

          Service endpoints:
          - Gateway (EXPOSED): http://{{ external_hostname }}{% if app_services[0].port != 80 and app_services[0].port != 443 %}:{{ app_services[0].port }}{% endif %}

          - Auth Service (INTERNAL): {{ app_services[1].container_name }}:{{ app_services[1].internal_port }}
          - Scheduling Service (INTERNAL): {{ app_services[2].container_name }}:{{ app_services[2].internal_port }}
          - Database (INTERNAL): {{ database_host }}:{{ database_port }}

          Container names:
          - Gateway: {{ app_services[0].container_name }}
          - Auth: {{ app_services[1].container_name }}
          - Scheduling: {{ app_services[2].container_name }}
          - Database: sp-database (with persistent volume: shift-planning-db-data)

          Security:
          ✓ Only Gateway service is exposed to the host
          ✓ Auth and Scheduling services are internal to Podman network

          Next steps:
          1. Verify services are running: podman ps
          2. Check logs if needed: podman logs <container_name>
          3. Access the application at: http://{{ external_hostname }}{% if app_services[0].port != 80 and app_services[0].port != 443 %}:{{ app_services[0].port }}{% endif %}

          Management commands:
          - Stop all services: podman stop {{ app_services[0].container_name }} {{ app_services[1].container_name }} {{ app_services[2].container_name }} sp-database
          - Remove containers: podman rm {{ app_services[0].container_name }} {{ app_services[1].container_name }} {{ app_services[2].container_name }} sp-database
          - List volumes: podman volume ls
          - Remove volume (WARNING: deletes all data): podman volume rm shift-planning-db-data

          Deployment tags available:
          - --tags "infrastructure" : Deploy only infrastructure (network, database)
          - --tags "services"       : Deploy only application services
          - --tags "build"          : Only build images
          - --tags "validation"     : Only validate repositories
          - --skip-tags "migrations": Skip database migrations
          - --skip-tags "validation": Skip repository validation

          To update repositories before deployment:
          ansible-playbook playbooks/manage-repositories.yml -i inventories/{{ deployment_environment }}/hosts.yml

- name: Show containers
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Show running containers
      command: podman ps
      register: containers
      changed_when: false

    - name: Display container list
      debug:
        msg: "{{ containers.stdout_lines }}"
